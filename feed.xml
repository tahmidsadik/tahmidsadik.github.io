<?xml version='1.0' encoding='UTF-8'?>
<rss version='2.0' xmlns:atom='http://www.w3.org/2005/Atom'>
<channel>
<atom:link href='http://tahmid.me/' rel='self' type='application/rss+xml'/>
<generator>
clj-rss
</generator>
<title>
LAZY LAMBDA
</title>
<link>
http://tahmid.me/
</link>
<description>
(map reduce filter)
</description>
<lastBuildDate>
Wed, 15 Jul 2015 16:36:10 +0600
</lastBuildDate>
<item>
<guid>
http://tahmid.me/posts/2015-07-15-bootstrapped-cljs-repl-for-android.html
</guid>
<link>
http://tahmid.me/posts/2015-07-15-bootstrapped-cljs-repl-for-android.html
</link>
<title>
Replicator: Bootstrapped ClojureScript REPL for Android
</title>
<description>
&lt;p&gt; With the recent developments of bootstrapping ClojureScript and &lt;a href='https://github.com/mfikes'&gt;Replete's&lt;/a&gt;  success on iOS, I thought  I would make a stand-alone ClojureScript REPL for Android too. The app would  need to evaluate javascript on the fly and for this there were two choices - either to  use a webview or a stand-alone javascript engine. I choose Mozilla's Rhino  Engine because It was easy to get started. But  performance-wise Rhino is not very good. So I plan to use  the JavaScriptCore engine later, which is also being used by Facebook's  React-Native to evaluate js in both iOS and Android.&lt;br /&gt;  &lt;center&gt;&lt;img src=&quot;../img/replicator.png&quot; width=&quot;223&quot; height=&quot;380&quot; /&gt;&lt;/center&gt; &lt;br/&gt;  While developing the app, I get to know at first hand how cool and friendly the Clojure community is.  The author of Replete Mike Fikes Guided me throughout the project and explained  the process of bootstrapping. Thanks a lot Mike.&lt;/p&gt;&lt;p&gt;&lt;br/&gt;  The app is in very early stage and needs tons of work and polish to make it usable.  I will release it as a free app in the Google Play Store. You can checkout  the project in &lt;a href='https://github.com/tahmidsadik112/Replicator'&gt;Github&lt;/a&gt;. Pull  requests are welcome.&lt;/p&gt;
</description>
<pubDate>
Wed, 15 Jul 2015 00:00:00 +0600
</pubDate>
</item>
<item>
<guid>
http://tahmid.me/posts/2015-06-28-the-cartesian-dream.html
</guid>
<link>
http://tahmid.me/posts/2015-06-28-the-cartesian-dream.html
</link>
<title>
The Cartesian Dream or Higher Order Functions
</title>
<description>
&lt;p&gt;I was always fascinated by the use of higher order functions. They are small, &lt;em&gt;elegant&lt;/em&gt;, consists of &lt;strong&gt;core&lt;/strong&gt; building blocks of any programming language, functions. Now, functions are simple. We all know about functions, so let's focus on the difference between them.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Higher order functions may &lt;i&gt;&lt;strong&gt;take other functions&lt;/strong&gt;&lt;/i&gt; as input.&lt;/li&gt;&lt;li&gt;Higher order functions may &lt;i&gt;&lt;strong&gt;return other functions&lt;/strong&gt;&lt;/i&gt; as output.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Let's write a function that will return another function ( just think about it for a second, You are generating a function dynamically, whoa ).&lt;/p&gt;&lt;p&gt;Here's an example in clojure&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;clojure&quot;&gt;&amp;#40;defn multiple-of-x? &amp;#91;x&amp;#93;
  &amp;#40;fn &amp;#91;n&amp;#93; &amp;#40;zero? &amp;#40;rem n x&amp;#41;&amp;#41;&amp;#41;&amp;#41;

&amp;#40;&amp;#40;multiple-of-x? 3&amp;#41; 15&amp;#41;         ;; true
&amp;#40;&amp;#40;multiple-of-x? 5&amp;#41; 15&amp;#41;         ;; true
&amp;#40;&amp;#40;multiple-of-x? 9&amp;#41; 15&amp;#41;         ;; false
&lt;/code&gt;&lt;/pre&gt;The function multiple-of-x? takes a number x as input and returns a functionwhich itself takes another number n as input and returns true if n isa multiple of x, otherwise false.&lt;br /&gt;&lt;p&gt;Writing higher order functions might take some time, but they also tend to become much more useful. They also force you to think about generalising a problem and think through, which in turn might make you a better programmer.&lt;/p&gt;
</description>
<pubDate>
Sun, 28 Jun 2015 00:00:00 +0600
</pubDate>
</item>
</channel>
</rss>
